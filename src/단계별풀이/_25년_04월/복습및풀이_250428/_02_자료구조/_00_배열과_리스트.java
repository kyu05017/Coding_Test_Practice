package 단계별풀이._25년_04월.복습및풀이_250428._02_자료구조;

public class _00_배열과_리스트 {
	public static void main(String[] args) {
		/**
		 *  배열 :
		 * 배열은 메모리의 연속 공간에 값이 채워져 있는 형태의 자료구조입니다. 배열의 값은 인덱스를 통해 참조할 수 있으며,
		 * 선언한 자료형의 값만 저장할 수 있습니다. 다음 그림은 배열은 나타낸 것입니다.
		 * 배열에 값1, 값2,...값6이 채워져 있고, 각 갑은 0부터 5까지 인덱스가 지정되어 있습니다.
		 *
		 * 배열 = {1,2,3,4,5,6}
		 * 인덱스 {0.1.2.3.4.5}
		 *
		 * 배열의 특징
		 * 1. 인덳스를 사용하여 값에 바로 접근할 수 있다.
		 * 2. 새로운 값을 삽입하거나 특정 인덱스에 있는 값을 삭제하기 어렵다. 값을 삽입하거나 삭제하려면 해당 인덱스 주변에 있는 값을 이동시키는 과정이 필요하다.
		 * 3. 배열의 크기는 선언할 대 지정할 수 있으며, 한 번 선언하면 크기를 늘리거나 줄일 수 없다.
		 * 4. 구조가 간단하므로 코딩 테스트에서 많이 사용한다.
		 *
		 */

		/**
		 *   리스트 :
		 * 리스트는 값과 포인터를 묶은 노드라는 것을 포인터로 연결한 자료구조
		 * 노드 : 노드는 컴퓨터 과학에서 값, 포인터를 쌍으로 갖는 기초단위를 부르는 말.
		 *
		 * [ 비어있음 ] -> [ 40 ](HEAD) -> [ 55 ](NEXT) -> [ 20 ](NEXT) -> [ DATA ](포인터) -> [ 23 ](TAIL) -> [ 비어있음 ]
		 *
		 * 리스트의 특징
		 * 1. 인덱스가 없으므로 값에 접근하려면 HEAD 포인터부터 순서대로 접근해야 한다. 자시 말해 값에 접근하는 속도가 느리다.
		 * 2. 포인터로 연결되어 있으므로 데이터를 삽입하거나 삭제하는 연산 속도가 빠르다.
		 * 3. 선언할 때 크기를 별도로 지정하지 않아도 된다. 다시 말해 리스트의 크기는 정해져 있지 않으며, 크기가 변하기 쉬운 데이터를 다룰 때 적절하다.
		 * 4. 포인터를 저장할 공간이 필요하므로 배열보다 구조가 복잡하다.
		 *
		 */
	}
}
